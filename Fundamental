#1.0 Ansile dùng để làm gì?
@link: https://news.cloud365.vn/10-phut-ansible-co-ban-phan-1-ansile-dung-de-lam-gi/ 
IaC: Infrastructure As Code: Làm hạ tầng giống như làm lập trình.

#2.0 Dựng LAB để thực hành ansible.
@link: https://news.cloud365.vn/10-phut-ansible-co-ban-phan-2-dung-lab-de-thuc-hanh-ansible/ 
# Mô hình và IP Planning.
1.Ansible Server(CentOS_7).132, 2 Client CentOS_6.122,7.123, 2 Client Ubutu_16.124,18.125.

# Cài đặt.
1. Thiết lập hostname, IP cho các node.
!!!!hostnamectl set-hostname [hostname]

2. Cài đặt ansible trên node Ansible Server
yum install -y epel-release 
yum update -y
yum install -y ansible
# check version.
ansible --version

3. Cấu hình SSH Key và khai báo file inventory.
- Ansible hđ theo cơ chế agentless (không cần cài đặt agent trên client để điều kiển) => sử dụng SSH => Có 2 cách để ansible điều khiển client.
+ Cách 1: username và port của SSH trong khai báo Inventory. Không khuyến cáo vì password ở dạng clear text (Nếu dùng cần phải secure cho file Inventory bằng Ansible-vault.
+ Cách 2: SSH keypair. Tạo pravite và public key trên Ansible Server và copy qua Client(Host). 

4. Tạo SSH key cho các node.
# Tại Ansible Server tạo SSH key.
ssh-keygen
# Thực hiện các thao tác Enter và để mặc định các tùy chọn khi lab.
# Thực hiện copy file key sang các node client còn lại.
Ex: ssh-copy-id root@192.168.80.123
# Ấn Yes và nhập mật khẩu root của node.
# Làm tương tự với node khác.
# CHECK: Từ Ansible Server, thử SSH sang các node, nếu không bị hỏi mật khẩu thì ta đã sử dụng ssh key thành công.
# NOTE: Dùng lệnh exit sau khi đăng nhập ở từng mode.

5. Khai báo file inventory.
# Trên Ansible Server.
# Mặc định thì danh sách các host mà AnsibleServer điều khiển sẽ nằm ở file /etc/ansible/host.
# File mặc định sẽ chứa các khai báo mẫu, thực hiện sao lưu lại và khai báo file mới theo bài LAB.
mv /etc/ansible/hosts /etc/ansible/hosts.org
#Tạo file mới để khai báo các host
vi /etc/ansible/hosts
# Nội dung của file sẽ có dạng như sau.
Ex: 
192.168.80.122
[centos6]
192.168.80.123
[]: để khai báo group. (group tự quy hoạch cho phù hợp)
# Thực hiện kiểm tra danh sách host đã đươc khai báo trong file inventory.
 ansible all --list-hosts. # Liệt kê all các host nằm trong Inventory bất kể nằm trong group nào.
# Nếu chúng ta chỉ muốn kiểm tra các host trong group [centos]
ansible centos6 --list-host.
# Một file inventory tương đối hoàn chỉnh sẽ có định đạng như sau.
client1 ansible_host=192.168.80.122 ansible_port=22 ansible_user=root

[centos6]
client2 ansible_host=192.168.80.123 ansible_port=22 ansible_user=root

[ubuntu]
client3 ansible_host=192.168.80.124 ansible_port=22 ansible_user=root
client4 ansible_host=192.168.80.125 ansible_port=22 ansible_user=root
+ client1, client2, client3, client4: Tương ứng là các hostname của các node.
+ ansible_host: Địa chỉ IP của node client tương ứng.
+ ansible_port: Port của SSH phía client, nếu ta thay đổi thì sẽ chỉnh lại cho đúng.
+ ansible_user: Là username của client mà AnsibleServer sẽ dùng để tương tác, trong bước trên tôi sử dụng là user root và thông qua SSH Key.
6. Sử dụng một số lệnh kiểm tra cơ bản.

# Tùy chọn -m(module): ping,tracert,...
Ex: ansible all -m ping
# ping với Group
Ex: ansible centos6 -m ping

7. Sử dụng các module cơ bản của ansilbe trong chế độ tương tác.
# Chế độ tương tác của ansible tạm hiểu là chế độ dùng các lệnh đơn, ngay sau khi thực hiện lệnh thì sẽ có output để quan sát.
- Kiểm tra và xác nhận các config.

8. Sử dụng module command
# kiểm tra uptime.
ansible all -m command -a "ten_cau_lenh_module_command_ho_tro"
Ex: ansible centos6 -m command -a "uptime"
Ex1: ansible all -m command -a "uptime"
# Trả về kết quả của lệnh ls -alh ở từng node.
Ex: ansible all -m command -a "ls -alh"
# Trả về phiên bản kernel.
Ex: ansible all -m command -a "uname -rms"
#########Tính năng module là cho phép thực hiện lệnh của Linux từ xa#########

9. Module setup trong ansible.
# Kiểm tra các thông tin tổng quát về hệ điều hành của các node.
# Kiểm tra distro của các host.
Ex: ansible all -m setup -a 'filter=ansible_distribution'
NOTE:  -a để lọc kết quả của lệnh ansible all -m setup bởi vì kết quả lệnh dài và nhiều tham số.
# Để liệt kê ra các địa chỉ IPv4 trên các node.
Ex: ansible all -m setup -a 'filter=ansible_default_ipv4'

#3.0 Hướng dẫn sử dụng ad-hoc command trong ansible.
- Chế độ ad-hoc chính là sử dụng từng câu lệnh đơn mà ansible hỗ trợ.
- Với ad-hoc command mà ansible cung cấp. Ta thực hiện các task đơn(y/c thực hiện độc lập) để ra lệnh cho hạ tầng(client quản lý bởi ansible)
thực hiện các y/c rời rác khi quản lý client.

# 1. Tại sao lại dùng ad-hoc command trong ansible?
- Khi vận hành hệ thống, bạn thường xuyên phải lặp đi các thao tác rất cơ bản ví dụ như:
 + Cần phải khởi động lại OS
 + Cần phải khởi động lại mysql hoặc đơn giản là cần phải update các gói phần mềm phổ thông (VIM, WGET ….) trên hàng loạt các máy chủ khác nhau (CentOS, Ubuntu …).
 + Hoặc phải kiểm tra trạng thái của các services chẳng hạn.
 ......
# 2. Thực hành ad-hoc command trong ansible.
- Thông tin của các host client sau khi cấu hình keypair ở file /root/.ssh/known_hosts.
- Nội dung của file /etc/ansible/hosts có dạng.
Ex: 
192.168.80.122

[centos6]
192.168.80.123

[ubuntu]
192.168.80.124
192.168.80.125

# 3. Thực hiện các câu lệnh ad-hoc.
- Cú pháp: ansible [pattern] -m [module] -a "[module options]"

# 3.1 Thực hiện kiểm tra dung lượng RAM của client.
Ex: ansible all -a "free -m"   # Có thể thay all bằng group.

# 3.2 Thực hiện reboot hàng loạt các client.
Ex: ansible ubuntu -a "init 6" # Có thể thay ubutu bằng all.

# 3.3 Thực hiện cài đặt gói ứng dụng hàng loạt.
- Các task cài đặt đơn lẻ cũng có thể dùng ad-hoc command của ansible để triển khai.
# Cài apache trên máy có hđh là ubutu.
Ex: ansible ubuntu -m apt -a "name=apache2 state=latest"  # sử dụng module apt mà ansible hỗ trợ cho ubutu
# Check kết quả
Ex: ansible ubuntu -a "apache2 -v"
# Thực hiện cài VIM.
Ex: ansible all -m apt -a "name=vim state=latest"

# 3.4 Sử dụng ad-hoc command để thu thập thông tin của client.
Ex: ansible all -m setup

# 4. Viết Playbook trên Ansible.
I. Thuật ngữ.
- Control Node/ Management Control: Node cài ansible. Ra lệnh cho các node/client khác thực hiện công việc mà không cần đăng nhập vào.
- Inventory: 1 file INI chưa in4 clients từ xa cần quản lý.
- Playbook: 1 file YAML chứa 1 tập các công việc cần tự động hóa.
- Task: 1 task xác định 1 công việc đơn lẻ được thực hiện.
- Module: 1 module sẽ trừu tượng hóa một tác vụ của hệ thống.
- Role: 1 tập hợp các playbook, các template các file khác, được tổ chức và xác định trước để tái sử dụng.
- play: 1 lần thực thi suôn sẽ từ đầu tới cuối gọi là 1 play.
- Facts: Các biến toàn cục chứa in4 về hệ thống, như Network interface hay Operating System.
- Handles: Sử dụng để kích hoạt thay đổi trạng thái các service, như restart hay reload 1 service.

+ Mỗi thao tác trên playbook là 1 task(Cài đặt, Khởi động, dừng,....)
+ Sử dụng các Module để tạo thành 1 task(Ex: Muốn cài đặt gói trên centos_7 ta dùng module "YUM" của ansible)
+ Truyền thông tin chi tiết hơn về server cho Playbook để nó biết mà chạy => cần Inventory.

II. Định dạng của Task.
- name: Install http package
    yum:
      name: httpd
      state: latest
+ name: tùy chọn nhưng nên sử dụng để đặt tên cho Task. Hiển thị task được thực thi giúp ta dễ quan sát, theo dõi.
+ yum: module của của ansible 
# Task thể hiện rằng ta muốn cập nhật http package lên bản mới nhất. Nếu chưa có, nó sẽ được cài đặt.

III. Định dạng của Playbook.

---
- hosts: centos7
  become: True
  tasks:
  - name: Install httpd
    yum:
      name: httpd
      state: latest
  - name: Start httpd
    service:
      name: httpd
      state: started
      enabled: True

IV. Viết Playbook.
4.1 Làm việc với các biến.
- Xác định biến qua sử dụng section vars của playbook.
- Định nghĩa biến package – biến mà sau này được sử dụng bên trong các Task.

---
- hosts: centos7
  become: True
  vars:
    package: httpd
  tasks:
  - name: Install httpd
    yum:
      name: "{{package}}"
      state: latest
      
- Biến package có phạm vi sử dụng trên toàn Playbook.

4.2 Sử dụng vòng lặp.
- Dùng vòng lặp khi phải lặp lại cùng một task nhiều lần, chỉ khác giá trị input.
- Để tạo một vòng lặp bên trong một task, ta sử dụng with_items kèm theo bên dưới là 1 mảng các giá trị. Ta truy xuất đến các giá trị này thông qua biến vòng lặp item.
Ex: 
---
- hosts: centos7
  become: True
  tasks:
  - name: Install packages
    yum:
      name: "{{item}}"
      state: latest
    with_items:
    - httpd
    - mariadb-server
    - mariadb
    - php
    - php-mysql
    - php-fpm 
 
- Ta cũng có thể sử dụng kết hợp một biến mảng.
---
- hosts: centos7
  become: True
  tasks:
  - name: Install packages
    yum:
      name: ['httpd','mariadb-server','mariadb','php','php-mysql','php-fpm']
      state: latest
     
4.3 Sử dụng các điều kiện (Conditionals).
- Các điều kiện được sử dụng để tự động quyết định xem liệu một task có được thực thi hay không dựa trên một biến hay một output từ một nguồn
Ex: output của một command.
  - name: Shutdown CentOS Based Systems
    command: /sbin/shutdown -t now
    when: ansible_facts['distribution'] == "CentOS"
+ ansible_facts (các biến đặc biệt của Ansible) là ansible_facts[‘distribution’] nhằm kiểm tra OS hiện tại của node client. 
   
  ---
- hosts: centos7
  become: True
  tasks:
  - name: Check if HTTPD is installed
    register: http_installed
    command: httpd -v
    ignore_errors: true

  - name: This task is only executed if HTTPD is installed
    debug: var=http_installed
    when: http_installed is success

  - name: This task is only executed if HTTPD is NOT installed
    debug: msg='HTTPD is NOT installed'
    when: http_installed is failed
   
- Task 1 : Chạy lệnh kiểm tra version của apache trên CentOS. Nếu đã cài apache thì lệnh sẽ chạy bình thường ; output và các giá trị trả về sẽ lưu vào biến http_installed
- Task 2 : Kiểm tra xem lệnh ở task 1 có được thực thi thành công không thông qua việc kiểm tra biến http_installed. Nếu thành công thì hiển thị nội dung của biến http_installed.  
- Task 3 : Kiểm tra xem lệnh ở task 1 có được thực thi thành công không thông qua việc kiểm tra biến http_installed. Nếu không thành công thì hiển thị nội dung HTTPD is NOT installed.

4.4 Làm việc với các Template.
+ có 1 file tên là index.html có nội dung như sau:
<h1>Hey, I'm {{my_name}} </h1>  #biến my_name
+ Cùng với đó tôi có một playbook ở cùng folder chứa file index.html kia.

---
- hosts: centos7
  become: True
  vars:
    my_name: 'Pham Khanh'
    
  tasks:
  - name: Test template
    template:
      src: index.html
      dest: /var/www/html/index.html

Do it to see the result.

4.5 Khai báo và kích hoạt các Handler.
- Các handler trông khá giống các task nhưng chúng chỉ được thực thi khi được kích hoạt bởi một chỉ thị notify bên trong một task.
---
- hosts: centos7
  become: True
  vars:
    my_name: 'PhamKhanh123'
  tasks:
  - name: template configuration file
    template:
      src: index.html
      dest: /var/www/html/index.html
    notify:
      - restart httpd
  handlers:
      - name: restart httpd
        service:
          name: httpd
          state: restarted
          
V. Playbook mẫu.
---
- hosts: centos7
  become: True
  vars:
    my_name: 'PhamKhanh123'
    package: httpd
  tasks:
  - name: Install httpd
    yum:
      name: "{{package}}"
      state: latest

  - name: Check if HTTPD is installed
    register: http_installed
    command: httpd -v
    ignore_errors: true

  - name: This task is only executed if HTTPD is installed
    debug: var=http_installed
    when: http_installed is success

  - name: This task is only executed if HTTPD is NOT installed
    debug: msg='HTTPD is NOT installed'
    when: http_installed is failed

  - name: template configuration file
    template:
      src: index.html
      dest: /var/www/html/index.html
    notify:
      - restart httpd
  handlers:
      - name: restart httpd
        service:
          name: httpd
          state: restarted
          
+ host: centos7 Chỉ cho playbook biết thực thi ở đâu.
+ become: True Nói với ansible rằng sẽ sử dụng leo thang đặt quyền(sudo) để chạy các task trong playbook
+ vars: Khai báo các biến.
+ tasks: Nơi chứa các task được khai báo.
+ handlers: Nơi các service cùng trạng thái của nó được khai báo.

VI. Chạy một Playbook.
#ansible-playbook -i path_to_inventory_file path_to_playbook.
#-i : Chỉ định đường dẫn inventory file.

NOTE: Ansible duyệt qua 1 task mà task đó đã được thực hiện trước đó rồi và không có gì thay đổi thì Ansible sẽ đi tới task tiếp theo mà không phải mất công chạy lại task đó nữa


 

   
   

























